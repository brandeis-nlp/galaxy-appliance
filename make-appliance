#!/usr/bin/env bash

#
# Script to build a LAPPS appliance.
# Synopsis
#
#   $ ./make-appliance [-a] [-b] [-o] [-e host_dir]
#
# Typically you would use just the -a and -b options.
#
# The building blocks that this script works on are the subdirectories in this
# directory (galaxy, htrc, masc, oaqa etcetera). For all those (except one) of
# those directories a Docker image will be created. The galaxy is a special
# module which is the one connecting to all the others, htrc is special in that
# it does only contribute some functionality to the galaxy image, it does not
# get its own image. If the -a option is used then all
#
# The other directories all have a similar layout, containing the following
# files:
#
#    Dockerfile
#    VERSION
#    package_list.txt
#    packages/
#    tool_conf.groovy
#    tools/
#
# The package_list.txt file determmines what packages (containing war files with
# services) are downloaded for the modules. The downloads are tgz files that are
# stored in the packages directory and later copied to the images.
#
# The tools directory has tools specific for the module where typically a tool
# is an XML file file that defines how the tool is wrapped in Galaxy, associated
# with a groovy script that tells you how to invoke the tool.
#
# The tool_conf.groovy script is used by the ToolConfEditor to generate the
# Galaxy tool menu.
#
# The Dockerfile has the instructions for building the Docker image. Typically,
# the content is as follows (taken from opennlp/Dockerfile)
#
#    FROM lappsgrid/tomcat7:1.1.0
#    ADD ./packages/*.tgz /var/lib/tomcat7/webapps
#
# These Dockerfiles are used when make-appliance creates the images after all
# other steps have been performed. If you do not use the -d option, then this is
# skipped for all images except the galaxy image.
#
# This script also readies the containers for being in a Docker swarm by
# creating the docker-compose.yml YAML file.


set -e

APPLIANCE=lapps
SERVER=http://downloads.lappsgrid.org


parsed=false        # used in parsing options (currently -a, -b)

overwrite=false     # true if -o option is given
                    # download packages even if you already have them

make_docker=false   # true if -b option is given
                    # re-build docker images for each module (& galaxy)

all=false           # true if -a option is given
                    # always add all modules in current directory (ignoring cmd
                    # arguments)
export_dir=         # a directory on the host machine to backup
                    # galaxy environment


# Some debugging flags, set them to false to skip execution of commands in
# functions with the same names as the variables
generate_docker_configuration=true
#generate_docker_configuration=false
initialize_build=true
#initialize_build=false
configure_tools=true
#configure_tools=false
copy_tools=true
#copy_tools=false
build_image=true
#build_image=false

while getopts "abfoe:h" opt ; do
	case $opt in
        a)
            echo "option -a: include all service modules"
            all=true
            ;;
		b)
			echo "option -b: build all docker images "
			make_docker=true
			;;
        f) 
            echo "option -f: (use with '-b') build all docker images from scratch ('--no-cache')"
            FORCE_BUILD="--no-cache"
            ;;
        o)
            echo "option -o: force download service packages (.war)"
            overwrite=true
            ;;
		e)
			echo "option -e $OPTARG: use $OPTARG as 'export' directory "
			export_dir=$OPTARG
			;;
		h)
			echo "./make-appliance [-a] [-b [-f] ] -o] [-e <EXPORT_DIR>] name image [image...]"
            echo "option -a: include all service modules"
			echo "option -b: build all docker images "
            echo "option -f: (use with '-b') build all docker images from scratch ('--no-cache')"
            echo "option -o: force download service packages (.war)"
			echo "option -e $OPTARG: use $OPTARG as 'export' directory "
			exit 1
			;;
		*)
			echo "Unhandled option: $1"
			exit 1
			;;	
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
		:)
			echo "Option -$OPTARG requires an argument." >&2
			exit 1
			;;
	esac
done
shift "$((OPTIND-1))"

function validate_module {
    # strip path seps and only returns a tool module name, excluding base
    # modules (galaxy, build)
    if [ "$1" = "build/" -o "$1" = "galaxy/" ] ; then 
        printf ""
    else
        printf `echo $1 | sed 's/\/$//g'`
    fi
}


function prep_modules {
    for module in $@ ; do 
	validated_module=`validate_module $module`
	if [ "$validated_module" != '' ]
	then
            printf " `validate_module $module`"
	fi
    done
}


# parse flags first 
# while [ "$parsed" = false ] ; do 
    # parse_options $1
    # if [ "$parsed" = false ] ; then
        # shift
    # fi
# done


# then preprare the list of modules to include
if [ "$all" = true ] ; then 
    modules=`prep_modules $(ls -d */)`
else
    modules=`prep_modules "$@"`
fi


function build_appliance {

    # Build the appliance. Note that the build is initialized after dowloading
    # packages because the galaxy packages need to be in the build.

    generate_docker_configuration
    download_packages galaxy $@
    initialize_build
    copy_tools $@
    configure_tools $@

    # build all non-galaxy images
    while [ -n "$1" ] ; do
        if [ "$make_docker" = "true" ] ; then
            cd $1 
	    build_image $1
            cd ..
	fi
        shift
    done

    # finally, build the galaxy image
    cd build 
    if [ "$make_docker" = "true" ] ; then
        build_image "galaxy-htrc"
    fi
}


function generate_docker_configuration {
    # Create the docker-compose config file (yaml file)
    echo; echo ">>> Generate docker configuration"
    echo "$ groovy YamlBuilder.groovy $APPLIANCE $modules > docker-compose.yml"
    if [ $generate_docker_configuration = true ]
    then
        if [ -n "$export_dir" ] ; then
	    groovy YamlBuilder.groovy -e $export_dir $APPLIANCE $modules > docker-compose.yml
        else
	    groovy YamlBuilder.groovy $APPLIANCE $modules > docker-compose.yml
        fi
    fi
}


function download_packages {
    echo; echo '>>> downloading packages'
    while [ -n "$1" ] ; do
	cd $1
	download_module_packages $1
	cd ..
	shift
    done
}


function download_module_packages {
    # download packages for module $1, check the $overwrite variable to see if
    # already downloaded packages need to be downloaded again, packages are
    # downloaded to $1/packages (for example, to masc/packages if masc is one of
    # the modules).
    if [ ! -d packages ] ; then mkdir packages ; fi
    for package in `cat package_list.txt`; do
	#echo $package
	if [ $overwrite = true ] || [ ! -e packages/$package.tgz ] ;
	then
	    cd packages
	    if [ -e $package.tgz ]; then rm $package.tgz; fi
	    echo $ wget $SERVER/$package.tgz
	    wget $SERVER/$package.tgz
	    cd ..
	fi
    done
}


function initialize_build {
    # Start building galaxy with fresh tool_conf and other goodies
    echo; echo ">>> Initializing build directory"
    echo $ cp -R galaxy build
    if [ $initialize_build = true ] 
    then
	rm -rf build
	cp -R galaxy build
    fi
}


function copy_tools {
    # Copy tools from all sub modules (that is, not including galaxy) to the new
    # build
    echo; echo '>>> copying tools'
    while [ -n "$1" ] ; do
	echo $ cp -R $1/tools build
	if [ $copy_tools = true ]
	then
	    cp -R $1/tools build
	fi
	shift
    done
}


function configure_tools {
    # Configure tools from all sub modules. Adds module tools to the tool config
    # file in build/tools_conf.xml
    echo; echo '>>> configuring tools'
    while [ -n "$1" ] ; do
        # this will minimize (remove empty sections) when building the final
        # tool_conf.xml
	if [ -z "$2" ] ; then OPTS="-m" ; fi
	editor=./ToolConfEditor-1.0.1.jar
	tool_conf=build/tool_conf.xml
	tool_conf_script=$1/tool_conf.groovy
	echo $ java -jar $editor $OPTS -c $tool_conf -o $tool_conf $tool_conf_script
	if [ $configure_tools = true ]
	then
	    java -jar $editor $OPTS -c $tool_conf -o $tool_conf $tool_conf_script
	fi
	shift
    done
}


function build_image {
    # Build the Docker image for the module. Note that htrc module does not have
    # its own docker container, but lives in the galaxy docker container so we
    # will not build the 'htrc' module
    image_tag=$APPLIANCE/$1
    if [ "$1" != "htrc" ] ; then
	if [ $build_image = true ]
	then
        if [ -n $FORCE_BUILD ] ; then 
            [ -n "`docker images -q $image_tag`" ] && docker rmi $image_tag
        fi
	    echo; echo ">>> Buiding $1"
        set -x
        docker build $FORCE_BUILD -t $image_tag . 
        set +x
	fi
    fi
}


build_appliance $modules

