// The JSONC Groovy DSL that defines the JSON configuration neededto launch a 
// Lappsgrid appliance inside Amazon ECS (Elastic Container Service).
// See: https://console.aws.amazon.com/ecs/home?region=us-east-1#/taskDefinitions

/***************************************************/
/*** NO CHANGES SHOULD BE NEEDED TO THIS SCRIPT. ***/
/***************************************************/

links = [
	// Galaxy is linked to all other containers
	galaxy: containers
]

// The Docker images to be used for the appliance. 
def images = containers.inject([:]) { map,name -> 
	map[name] = "lappsgrid/$name"; 
	return map 
}
images.galaxy = galaxy_image

// A simple closure that generates the data structure (a list of maps)
// that is used to configure the port mappings for an image.
def map = { host, container ->
	[[
		containerPort: container,
		hostPort: host,
		protocol: 'tcp'
	]]
}

int port = 8000  
containers << 'galaxy'
containerDefinitions (
	containers.collect { name ->
		int from = ports[name]?.from ?: ++port
		int to = ports[name]?.to ?: 8080
		def definition = [
			name: name,
			image: images[name],
			cpu: cpu[name] ?: cpu.default,
			memory: memory[name] ?: memory.default,
			essential: true,
			portMappings: map(from, to),
			command: [ '/usr/bin/startup' ]
		]
		if (links[name]) {
			definition.links = links[name]
		}
		// Customize per container settings here.
		if (name == 'galaxy') {
			definition.privileged = true
			definition.mountPoints = [[
            	sourceVolume: "galaxy_storage",
                containerPath: "/export",
                readOnly: ""
			]]
		}
		return definition
	} 
)
// 'volumes' takes a list of maps. The parenthesis are required so 'volumes' is
// parsed correctly as a function call.
volumes ([
	{
		name "galaxy_storage"
    	host {
    		sourcePath "/usr/local/galaxy"
    	}
    }
])
family cluster

