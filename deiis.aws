// The JSONC Groovy DSL that defines the JSON configuration
// to launch the Lappsgrid DEIIS course appliance inside
// Amazon ECS (Elastic Container Service).

// The list of containers we will be creating.
List containers = [ 'masc', 'oaqa', 'lingpipe', 'stanford', 'galaxy' ]

/* 
 * Configuration maps
 * These configuration maps allow us to see the various settings 
 * for each Docker container grouped together in one place.
 */
 
// Port mapping for each container.  The 'from' field is the
// external server port and the 'to' field is the port inside
// the container.  If no port mapping is defined then incrementing 
// ports starting at 8001 are mapped to 8080.
ports = [
	galaxy: [from:80, to:80]
]

// The number of "cpu units" assigned to the container. On Amazon ECS
// there are 1024 "cpu units" available for every core in the instance.
// If no value is specified for a container the default value is used.
cpu = [
	default: 256
]


// The amount of memory allocated to the container. In no value is 
// specified for a container the default value will be used.
memory = [
	default: 512,
	lingpipe: 1024,
	stanford: 1024,
	galaxy: 4096
]

// Other containers the given container should be linked to .  Docker
// creates entries in the container's /etc/hosts file so a container 
// can reference the other containers by name, e.g. 
// http://vassar:8080, http://galaxy, etc.
links = [
	galaxy: containers - 'galaxy'
]

// The Docker image to be used for the container. 
images = containers.inject([:]) { map,name -> 
	if (name == 'galaxy') {
		map[name] = 'lappsgrid/galaxy-deiis'
	}
	else {
		map[name] = "lappsgrid/$name"; 
	}
	return map 
}

// A simple closure that generates the data structure (a list of maps)
// that is used to configure the port mappings for an image.
map = { host, container ->
	[[
		containerPort: container,
		hostPort: host,
		protocol: 'tcp'
	]]
}


/*** JSON magic starts here. ***/
// The ECS JSON configuration file is a map with three named sections:
// 1. containerDefinitions: cpu, memory, etc. settings for each container
//  
int port = 8000  
containerDefinitions (
	containers.collect { name ->
		int from = ports[name]?.from ?: ++port
		int to = ports[name]?.to ?: 8080
		def definition = [
			name: name,
			image: images[name],
			cpu: cpu[name] ?: cpu.default,
			memory: memory[name] ?: memory.default,
			essential: true,
			portMappings: map(from, to),
			command: [ '/usr/bin/startup' ]
		//	links: links[name]
		]
		if (links[name]) {
			definition.links = links[name]
		}
		// Customize per container settings here.
		if (name == 'galaxy') {
			definition.privileged = true
			definition.mountPoints = [[
            	sourceVolume: "galaxy_storage",
                containerPath: "/export",
                readOnly: ""
			]]
		}
		return definition
	} 
)
// 'volumes' takes a list of maps. The parenthesis are required so 'volumes' is
// parsed correctly as a function call.
volumes ([[
	name: "galaxy_storage",
    host: [ sourcePath: "/usr/local/galaxy"]
]])
family "lappsgrid-discovery-appliance" 

